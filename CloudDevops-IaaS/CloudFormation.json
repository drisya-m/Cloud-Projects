{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Resources": {
        "VPC1": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
            "CidrBlock": "10.0.0.0/16",
            "EnableDnsHostnames" : "true",
            "EnableDnsSupport" : "true",
            "Tags" : [ {"Key" : "Name", "Value" : "VPC1"} ]
            }
        },
        "Subnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC1"
                },
                "Tags" : [ {"Key" : "Name", "Value" : "Subnet1"} ],
                "CidrBlock" : "10.0.1.0/24",
      			"AvailabilityZone" : "us-east-1a",
      			"MapPublicIpOnLaunch" : "true"
            }
        },
        "SG1": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
            	"SecurityGroupIngress" : [{
         			"IpProtocol" : "tcp",
         			"FromPort" : 80,
         			"ToPort" : 80,
         			"CidrIp" : "0.0.0.0/0"
      			},
      			{
         			"IpProtocol" : "tcp",
         			"FromPort" : 22,
         			"ToPort" : 22,
         			"CidrIp" : "0.0.0.0/0"
      			}],
                "VpcId": {
                    "Ref": "VPC1"
                },
                "GroupDescription": "Allows HTTP and SSH",
                "Tags" : [ {"Key" : "Name", "Value" : "SG1"} ]
            }
        },
        "InstanceProfile" : {
           "Type" : "AWS::IAM::InstanceProfile",
           "Properties" : {
               "Path" : "/",
               "Roles" : ["proj_ec2_multiserver_role"]
           }
        },
        "EC2Instance01": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
            	"InstanceType" : "t2.micro",
            	"ImageId" : "ami-0e472ba40eb589f49",
                "KeyName" : "task01",
                "IamInstanceProfile" : {"Ref" : "InstanceProfile"},
                "NetworkInterfaces": [
                    {
                        "SubnetId": {
                            "Ref": "Subnet1"
                        },
                        "GroupSet": [{ "Ref" : "SG1" }],
                        "DeviceIndex": "0",
                        "DeleteOnTermination": "true"
                    }
                ],
                "Tags" : [ {"Key" : "Name", "Value" : "EC2Instance1"} ]
            }
        },
	        "IG1": {
	            "Type": "AWS::EC2::InternetGateway",
	            "Properties": {
					"Tags" : [ {"Key" : "Name", "Value" : "IG1"} ]
	            }
	        },
	        "RouteTable1" : {
   			"Type" : "AWS::EC2::RouteTable",
   			"Properties" : {
      			"VpcId" : { "Ref" : "VPC1" },
      			"Tags" : [ {"Key" : "Name", "Value" : "RouteTable1"} ]
     		}
   		},
   		"myRoute1" : {
   			"Type" : "AWS::EC2::Route",
   			"Properties" : {
      			"RouteTableId" : { "Ref" : "RouteTable1" },
      			"DestinationCidrBlock" : "0.0.0.0/0",
      			"GatewayId" : { "Ref" : "IG1" }
   			}
		},
		"mySubnetRouteTableAssociation1" : {
         "Type" : "AWS::EC2::SubnetRouteTableAssociation",
         "Properties" : {
            "SubnetId" : { "Ref" : "Subnet1" },
            "RouteTableId" : { "Ref" : "RouteTable1" }
         }
      },
   		"IGAttachment" : {
  			"Type" : "AWS::EC2::VPCGatewayAttachment",
  			"Properties" : {
      		"InternetGatewayId" : { "Ref" : "IG1"},
      		"VpcId" : { "Ref" : "VPC1"}
    		}
		},
		"Kinesis1": {
           "Type": "AWS::Kinesis::Stream",
           "Properties": {
               "Name": "m03p02_raw_data_stream",
               "RetentionPeriodHours" : 24,
               "ShardCount": 2,
               "Tags": [ {
                   "Key": "Name",
                   "Value": "Kinesis1" } ]
           }
        },
		"SNSTopic" : {
           "Type" : "AWS::SNS::Topic",
           "Properties" : {
               "Subscription" : [{
               "Endpoint" : "drisyamathilakath@gmail.com",
               "Protocol" : "email"
           }],
           "TopicName" : "m03p02_anomaly_alerts"
           }
        },
        "Subscription1" : {
           "Type" : "AWS::SNS::Subscription",
           "Properties" : {
               "Endpoint" : "drisyamathilakath@gmail.com",
               "Protocol" : "email",
               "TopicArn" : { "Ref" : "SNSTopic" }
           }
        },
        "S3Bucket": {
            "Type": "AWS::S3::Bucket",
            "DeletionPolicy": "Retain",
            "Properties": {
                "BucketName": "iaasproj-artifacts"
            }
        },
       "AnomalyDetection": {
           "Type": "AWS::Lambda::Function",
           "Properties": {
               "Handler": "index.lambda_handler",
               "Role": "arn:aws:iam::555374222971:role/iaas_proj_lambda_role",
               "Code": {
                   "ZipFile": {
                   "Fn::Join": [
                              "\n",
                              [
                                    "from pprint import pprint",
                                    "import boto3",
                                    "import json",
                                    "import csv",
                                    "import datetime",
                                    "import os",
                                    "import random",
                                    "import base64",
                                    "from decimal import Decimal",
                                    "from botocore.exceptions import ClientError",
                                    "def lambda_handler(event, context):",

                                    "    AWS_REGION = 'us-east-1'",
                                    "    #print(event)",

                                    "    dynamodb_res = boto3.resource('dynamodb', region_name=AWS_REGION)",
                                    "    anomaly_table = dynamodb_res.Table('m03p02_anomaly_data')",

                                    "    sns_client = boto3.client('sns', region_name=AWS_REGION)",
                                    "    topic_arn = 'arn:aws:sns:us-east-1:555374222971:m03p02_anomaly_alerts'",

                                    "    for record in event['Records']:",
                                    "        data_point = base64.b64decode(record['kinesis']['data'])",
                                    "        data_point = str(data_point, 'utf-8')",
                                    "        pprint(data_point, sort_dicts=False)",
                                    "        data_point = json.loads(data_point)",

                                    "        anomaly_type = {}",

                                    "        if data_point['value'] <= (1.1 * float(data_point['lowest_temp'])):",
                                    "            anomaly_type = 'Cold'",
                                    "        elif data_point['value'] >= (0.9 * float(data_point['highest_point'])):",
                                    "            anomaly_type = 'Hot'",

                                    "        anomaly_data = {'deviceid': data_point['deviceid'],",
                                    "                            'anomalyDate': data_point['date'],",
                                    "                           'timestamp': data_point['timestamp'],",
                                    "                            'value': data_point['value'],",
                                    "                            'anomalyType': anomaly_type}",

                                    "        anomaly_data = json.loads(json.dumps(anomaly_data), parse_float=Decimal)",
                                    "        response = anomaly_table.put_item(Item=anomaly_data)",
                                    "        #pprint('DB Response Data: ', response)",
                                    "        sns_client.publish(TopicArn=topic_arn,",
                                    "                            Message=str('Anomaly value = ' + str(anomaly_data['value']) + ' is detected. ' + 'Detcted temperature can be categorized as ' + anomaly_data['anomalyType']) ,",
                                    "                           Subject=str(anomaly_data['anomalyType'] + ' temperature is detected.')",
                                    "                            )",
                                    "    return 1"
                              ]
                          ]
    }
               },
               "Runtime": "python3.9",
               "Timeout": 25,
               "TracingConfig": {
                   "Mode": "Active"
               }
           }
       },
       "EventSourceMapping": {
    "Type": "AWS::Lambda::EventSourceMapping",
    "Properties": {
        "EventSourceArn": {
            "Fn::Join": [
                "",
                [
                    "arn:aws:kinesis:",
                    {
                        "Ref": "AWS::Region"
                    },
                    ":",
                    {
                        "Ref": "AWS::AccountId"
                    },
                    ":stream/",
                    {
                        "Ref": "Kinesis1"
                    }
                ]
            ]
        },
        "FunctionName": {
            "Fn::GetAtt": [
                "AnomalyDetection",
                "Arn"
            ]
        },
        "StartingPosition": "LATEST"
    }
},
        "DynamoDB1" : {
  			"Type" : "AWS::DynamoDB::Table",
  			"Properties" : {
      			"AttributeDefinitions" : [
      			 	{
  						"AttributeName" : "deviceid",
  						"AttributeType" : "S"
					},
					{
  						"AttributeName" : "timestamp",
  						"AttributeType" : "S"
					}
      			 ],
      			"KeySchema" : [
      				{
                        "AttributeName": "deviceid",
                        "KeyType": "HASH"
                    },
                    {
                        "AttributeName": "timestamp",
                        "KeyType": "RANGE"
                    }
                ],
      			"TableName" : "m03p02_anomaly_data",
      			"Tags" : [ {"Key" : "Name", "Value" : "DynamoDB1"} ],
      			"ProvisionedThroughput": {
                    "ReadCapacityUnits": 5,
                    "WriteCapacityUnits": 5
                }
    		}
		}
    }
}